// SCSS RFS function 10.0.0-alpha.0
//
// Automated responsive values for font sizes, paddings, margins and much more
//
// Licensed under MIT (https://github.com/twbs/rfs/blob/master/LICENSE)

// Configuration

// Base value
$rfs-base-value: 1.25rem !default;
$rfs-unit: rem !default;

@if $rfs-unit != rem and $rfs-unit != px {
    @error "`#{$rfs-unit}` is not a valid unit for $rfs-unit. Use `px` or `rem`.";
}

// Breakpoint at where values start decreasing if screen width is smaller
$rfs-breakpoint: 1200px !default;

// Resize values based on screen height and width
$rfs-two-dimensional: false !default;

// Factor of decrease
$rfs-factor: 10 !default;

@if type-of($rfs-factor) != number or $rfs-factor <= 1 {
    @error "`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.";
}

// 1 rem = $rfs-rem-value px
$rfs-rem-value: 16 !default;

// Disable RFS by setting $enable-rfs to false
$enable-rfs: true !default;

// Remove px-unit from $rfs-base-value for calculations
@if unit($rfs-base-value) == px {
    $rfs-base-value: $rfs-base-value / ($rfs-base-value * 0 + 1);
}
@else if unit($rfs-base-value) == rem {
    $rfs-base-value: $rfs-base-value / ($rfs-base-value * 0 + 1 / $rfs-rem-value);
}

// Remove unit from $rfs-breakpoint for calculations
@if unit($rfs-breakpoint) == px {
    $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1);
}
@else if unit($rfs-breakpoint) == rem or unit($rfs-breakpoint) == "em" {
    $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1 / $rfs-rem-value);
}

// Helper function to get the responsive value calculated by RFS
@function rfs-value($value) {
    @if $value == 0 {
        @return 0;
    }

    // Cache $value unit
    $unit: if(type-of($value) == "number", unit($value), false);

    // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em), just print the value
    @if not $unit or $unit != px and $unit != rem {
        @return $value;
    }

    // Remove unit from $value for calculations
    $value: $value / ($value * 0 + if($unit == px, 1, 1 / $rfs-rem-value));

    // Only add the media query if the value is greater than the minimum value
    @if abs($value) <= $rfs-base-value or not $enable-rfs {
        @return if($rfs-unit == rem, $value / $rfs-rem-value * 1rem, $value * 1px);
    }

    // Calculate the minimum value
    $value-min: $rfs-base-value + (abs($value) - $rfs-base-value) / $rfs-factor;

    // Calculate difference between $value and the minimum value
    $value-diff: abs($value) - $value-min;

    // Base value formatting
    $min-width: if($rfs-unit == rem, $value-min / $rfs-rem-value * 1rem, $value-min * 1px);

    // Use negative value if needed
    $min-width: if($value < 0, -$min-width, $min-width);

    // Use `vmin` if two-dimensional is enabled
    $variable-unit: if($rfs-two-dimensional, vmin, vw);

    // Calculate the variable width between 0 and $rfs-breakpoint
    $variable-width: #{$value-diff * 100 / $rfs-breakpoint}#{$variable-unit};

    $value: if($rfs-unit == rem, $value / $rfs-rem-value * 1rem, $value * 1px);

    // Return the calculated value
    @return 'min(' + $value + ', calc(' + $min-width + if($value < 0, ' - ', ' + ') + $variable-width + '))';
}

// RFS function
@function rfs($values) {
    @if $values == null or $values == () {
        @return null;
    }

    $val: '';

    // Loop over each value and calculate value
    @each $value in $values {
        $val: $val + ' ' + rfs-value($value);
    }

    // Remove first space
    @return unquote(str-slice($val, 2));
}
